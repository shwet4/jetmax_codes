// Generated by gencpp from file remote_control/ChangePositionRequest.msg
// DO NOT EDIT!


#ifndef REMOTE_CONTROL_MESSAGE_CHANGEPOSITIONREQUEST_H
#define REMOTE_CONTROL_MESSAGE_CHANGEPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace remote_control
{
template <class ContainerAllocator>
struct ChangePositionRequest_
{
  typedef ChangePositionRequest_<ContainerAllocator> Type;

  ChangePositionRequest_()
    : axis_name()
    , change_value(0.0)
    , duration(0.0)  {
    }
  ChangePositionRequest_(const ContainerAllocator& _alloc)
    : axis_name(_alloc)
    , change_value(0.0)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _axis_name_type;
  _axis_name_type axis_name;

   typedef float _change_value_type;
  _change_value_type change_value;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::remote_control::ChangePositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote_control::ChangePositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChangePositionRequest_

typedef ::remote_control::ChangePositionRequest_<std::allocator<void> > ChangePositionRequest;

typedef boost::shared_ptr< ::remote_control::ChangePositionRequest > ChangePositionRequestPtr;
typedef boost::shared_ptr< ::remote_control::ChangePositionRequest const> ChangePositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::remote_control::ChangePositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::remote_control::ChangePositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::remote_control::ChangePositionRequest_<ContainerAllocator1> & lhs, const ::remote_control::ChangePositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.axis_name == rhs.axis_name &&
    lhs.change_value == rhs.change_value &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::remote_control::ChangePositionRequest_<ContainerAllocator1> & lhs, const ::remote_control::ChangePositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace remote_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::remote_control::ChangePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_control::ChangePositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_control::ChangePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26811b883eeb4b422a9e3afbc3ae3f3f";
  }

  static const char* value(const ::remote_control::ChangePositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26811b883eeb4b42ULL;
  static const uint64_t static_value2 = 0x2a9e3afbc3ae3f3fULL;
};

template<class ContainerAllocator>
struct DataType< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "remote_control/ChangePositionRequest";
  }

  static const char* value(const ::remote_control::ChangePositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string axis_name\n"
"float32 change_value\n"
"float32 duration\n"
;
  }

  static const char* value(const ::remote_control::ChangePositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.axis_name);
      stream.next(m.change_value);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangePositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::remote_control::ChangePositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::remote_control::ChangePositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "axis_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.axis_name);
    s << indent << "change_value: ";
    Printer<float>::stream(s, indent + "  ", v.change_value);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REMOTE_CONTROL_MESSAGE_CHANGEPOSITIONREQUEST_H
