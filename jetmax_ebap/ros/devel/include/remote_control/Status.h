// Generated by gencpp from file remote_control/Status.msg
// DO NOT EDIT!


#ifndef REMOTE_CONTROL_MESSAGE_STATUS_H
#define REMOTE_CONTROL_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace remote_control
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : x(0)
    , y(0)
    , z(0)
    , id1(0)
    , id2(0)
    , id3(0)
    , id4(0)
    , pwm1(0)
    , motor1(0)
    , motor2(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)
    , id1(0)
    , id2(0)
    , id3(0)
    , id4(0)
    , pwm1(0)
    , motor1(0)
    , motor2(0)  {
  (void)_alloc;
    }



   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef int16_t _z_type;
  _z_type z;

   typedef uint16_t _id1_type;
  _id1_type id1;

   typedef uint16_t _id2_type;
  _id2_type id2;

   typedef uint16_t _id3_type;
  _id3_type id3;

   typedef uint16_t _id4_type;
  _id4_type id4;

   typedef uint8_t _pwm1_type;
  _pwm1_type pwm1;

   typedef uint8_t _motor1_type;
  _motor1_type motor1;

   typedef uint8_t _motor2_type;
  _motor2_type motor2;





  typedef boost::shared_ptr< ::remote_control::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote_control::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::remote_control::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::remote_control::Status > StatusPtr;
typedef boost::shared_ptr< ::remote_control::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::remote_control::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::remote_control::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::remote_control::Status_<ContainerAllocator1> & lhs, const ::remote_control::Status_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.id1 == rhs.id1 &&
    lhs.id2 == rhs.id2 &&
    lhs.id3 == rhs.id3 &&
    lhs.id4 == rhs.id4 &&
    lhs.pwm1 == rhs.pwm1 &&
    lhs.motor1 == rhs.motor1 &&
    lhs.motor2 == rhs.motor2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::remote_control::Status_<ContainerAllocator1> & lhs, const ::remote_control::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace remote_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::remote_control::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::remote_control::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_control::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_control::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_control::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_control::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::remote_control::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "590d96bbbe0686d00dc0bf91b47e905e";
  }

  static const char* value(const ::remote_control::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x590d96bbbe0686d0ULL;
  static const uint64_t static_value2 = 0x0dc0bf91b47e905eULL;
};

template<class ContainerAllocator>
struct DataType< ::remote_control::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "remote_control/Status";
  }

  static const char* value(const ::remote_control::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::remote_control::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 x\n"
"int16 y\n"
"int16 z\n"
"uint16 id1\n"
"uint16 id2\n"
"uint16 id3\n"
"uint16 id4\n"
"uint8 pwm1\n"
"uint8 motor1\n"
"uint8 motor2\n"
"\n"
;
  }

  static const char* value(const ::remote_control::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::remote_control::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.id1);
      stream.next(m.id2);
      stream.next(m.id3);
      stream.next(m.id4);
      stream.next(m.pwm1);
      stream.next(m.motor1);
      stream.next(m.motor2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::remote_control::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::remote_control::Status_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
    s << indent << "id1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id1);
    s << indent << "id2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id2);
    s << indent << "id3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id3);
    s << indent << "id4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id4);
    s << indent << "pwm1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pwm1);
    s << indent << "motor1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1);
    s << indent << "motor2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REMOTE_CONTROL_MESSAGE_STATUS_H
