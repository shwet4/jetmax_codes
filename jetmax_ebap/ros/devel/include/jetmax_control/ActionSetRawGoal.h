// Generated by gencpp from file jetmax_control/ActionSetRawGoal.msg
// DO NOT EDIT!


#ifndef JETMAX_CONTROL_MESSAGE_ACTIONSETRAWGOAL_H
#define JETMAX_CONTROL_MESSAGE_ACTIONSETRAWGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetmax_control
{
template <class ContainerAllocator>
struct ActionSetRawGoal_
{
  typedef ActionSetRawGoal_<ContainerAllocator> Type;

  ActionSetRawGoal_()
    : data()
    , repeat(0)  {
    }
  ActionSetRawGoal_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , repeat(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;

   typedef uint32_t _repeat_type;
  _repeat_type repeat;





  typedef boost::shared_ptr< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ActionSetRawGoal_

typedef ::jetmax_control::ActionSetRawGoal_<std::allocator<void> > ActionSetRawGoal;

typedef boost::shared_ptr< ::jetmax_control::ActionSetRawGoal > ActionSetRawGoalPtr;
typedef boost::shared_ptr< ::jetmax_control::ActionSetRawGoal const> ActionSetRawGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator1> & lhs, const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.repeat == rhs.repeat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator1> & lhs, const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetmax_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58ae1817d1d041c9a34f0f909e7566dc";
  }

  static const char* value(const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58ae1817d1d041c9ULL;
  static const uint64_t static_value2 = 0xa34f0f909e7566dcULL;
};

template<class ContainerAllocator>
struct DataType< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetmax_control/ActionSetRawGoal";
  }

  static const char* value(const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string data\n"
"uint32 repeat\n"
;
  }

  static const char* value(const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.repeat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionSetRawGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetmax_control::ActionSetRawGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetmax_control::ActionSetRawGoal_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
    s << indent << "repeat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.repeat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETMAX_CONTROL_MESSAGE_ACTIONSETRAWGOAL_H
