// Generated by gencpp from file jetmax_control/Mecanum.msg
// DO NOT EDIT!


#ifndef JETMAX_CONTROL_MESSAGE_MECANUM_H
#define JETMAX_CONTROL_MESSAGE_MECANUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetmax_control
{
template <class ContainerAllocator>
struct Mecanum_
{
  typedef Mecanum_<ContainerAllocator> Type;

  Mecanum_()
    : velocity(0.0)
    , direction(0.0)
    , angular_rate(0.0)  {
    }
  Mecanum_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , direction(0.0)
    , angular_rate(0.0)  {
  (void)_alloc;
    }



   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _direction_type;
  _direction_type direction;

   typedef float _angular_rate_type;
  _angular_rate_type angular_rate;





  typedef boost::shared_ptr< ::jetmax_control::Mecanum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetmax_control::Mecanum_<ContainerAllocator> const> ConstPtr;

}; // struct Mecanum_

typedef ::jetmax_control::Mecanum_<std::allocator<void> > Mecanum;

typedef boost::shared_ptr< ::jetmax_control::Mecanum > MecanumPtr;
typedef boost::shared_ptr< ::jetmax_control::Mecanum const> MecanumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetmax_control::Mecanum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetmax_control::Mecanum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetmax_control::Mecanum_<ContainerAllocator1> & lhs, const ::jetmax_control::Mecanum_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.direction == rhs.direction &&
    lhs.angular_rate == rhs.angular_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetmax_control::Mecanum_<ContainerAllocator1> & lhs, const ::jetmax_control::Mecanum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetmax_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::Mecanum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::Mecanum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::Mecanum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::Mecanum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::Mecanum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::Mecanum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetmax_control::Mecanum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac02d3f7aa8716c10f969453bc5f21a8";
  }

  static const char* value(const ::jetmax_control::Mecanum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac02d3f7aa8716c1ULL;
  static const uint64_t static_value2 = 0x0f969453bc5f21a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetmax_control::Mecanum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetmax_control/Mecanum";
  }

  static const char* value(const ::jetmax_control::Mecanum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetmax_control::Mecanum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velocity\n"
"float32 direction\n"
"float32 angular_rate\n"
;
  }

  static const char* value(const ::jetmax_control::Mecanum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetmax_control::Mecanum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.direction);
      stream.next(m.angular_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mecanum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetmax_control::Mecanum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetmax_control::Mecanum_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
    s << indent << "angular_rate: ";
    Printer<float>::stream(s, indent + "  ", v.angular_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETMAX_CONTROL_MESSAGE_MECANUM_H
