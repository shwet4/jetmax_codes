// Generated by gencpp from file jetmax_control/ActionSetListResponse.msg
// DO NOT EDIT!


#ifndef JETMAX_CONTROL_MESSAGE_ACTIONSETLISTRESPONSE_H
#define JETMAX_CONTROL_MESSAGE_ACTIONSETLISTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetmax_control
{
template <class ContainerAllocator>
struct ActionSetListResponse_
{
  typedef ActionSetListResponse_<ContainerAllocator> Type;

  ActionSetListResponse_()
    : action_sets()  {
    }
  ActionSetListResponse_(const ContainerAllocator& _alloc)
    : action_sets(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _action_sets_type;
  _action_sets_type action_sets;





  typedef boost::shared_ptr< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ActionSetListResponse_

typedef ::jetmax_control::ActionSetListResponse_<std::allocator<void> > ActionSetListResponse;

typedef boost::shared_ptr< ::jetmax_control::ActionSetListResponse > ActionSetListResponsePtr;
typedef boost::shared_ptr< ::jetmax_control::ActionSetListResponse const> ActionSetListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetmax_control::ActionSetListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetmax_control::ActionSetListResponse_<ContainerAllocator1> & lhs, const ::jetmax_control::ActionSetListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.action_sets == rhs.action_sets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetmax_control::ActionSetListResponse_<ContainerAllocator1> & lhs, const ::jetmax_control::ActionSetListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetmax_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eef2f65442e5649b9b3489933fa21e88";
  }

  static const char* value(const ::jetmax_control::ActionSetListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeef2f65442e5649bULL;
  static const uint64_t static_value2 = 0x9b3489933fa21e88ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetmax_control/ActionSetListResponse";
  }

  static const char* value(const ::jetmax_control::ActionSetListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] action_sets\n"
;
  }

  static const char* value(const ::jetmax_control::ActionSetListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_sets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionSetListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetmax_control::ActionSetListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetmax_control::ActionSetListResponse_<ContainerAllocator>& v)
  {
    s << indent << "action_sets[]" << std::endl;
    for (size_t i = 0; i < v.action_sets.size(); ++i)
    {
      s << indent << "  action_sets[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_sets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETMAX_CONTROL_MESSAGE_ACTIONSETLISTRESPONSE_H
